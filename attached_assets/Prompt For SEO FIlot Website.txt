You are my AI pair‑programmer. I have a Flask project for https://filot.finance with:

- app.py (Flask routes)
- templates/: base.html, index.html, features.html, minimal_pools.html, knowledge.html
- static/: robots.txt, images/
- Other modules: response_data.py, models.py

Your task is to implement **ALL** of the following SEO improvements in one go:

1. **Meta Tags & Keywords**  
   - In `templates/base.html`, replace any hard‑coded `<title>`, `<meta name="description">`, and `<meta name="keywords">` with Jinja placeholders:  
     ```html
     <title>{{ meta.title }}</title>
     <meta name="description" content="{{ meta.description }}">
     <meta name="keywords" content="{{ meta.keywords }}">
     <link rel="canonical" href="https://filot.finance{{ request.path }}" />
     ```
   - In each route in `app.py` (`index()`, `features()`, `pools()`, `knowledge()`, plus new persona/blog routes), pass alongside `meta.title` and `meta.description` a `meta.keywords` string that exactly matches these per‑page lists:

     **Home (`/`)**  
     `crypto yield farming for beginners, easy DeFi investing, no-code crypto bot, passive income crypto guide, automated crypto investing for complete beginners`

     **Features (`/features`)**  
     `AI crypto investment, Telegram bot API Solana, DeFi API integration, real-time APY tracking, precision yield farming`

     **Pools (`/pools`)**  
     `Solana liquidity pools, Raydium pools, SOL/USDC APY, best Solana APY pools, automated yield farming Solana`

     **Knowledge (`/knowledge`)**  
     `what is DeFi yield farming, non-custodial WalletConnect Solana, how liquidity pools work, DeFi for beginners, crypto security best practices`

     **Beginners (`/beginners`)**  
     `step-by-step DeFi yield farming for non-tech users, earn 20% APY crypto without risk, beginner-friendly crypto guide, no-code DeFi tutorial`

     **Developer Guide (`/developer-guide`)**  
     `integrate Raydium SDK RPC, extend FiLot bot custom smart-contract calls, Telegram DeFi bot callbacks, self-hosted Flask DeFi dashboard`

     **Security (`/security`)**  
     `Raydium pool smart-contract audit, on-chain APY oracle, non-custodial WalletConnect security, Solana liquidity pool security`

     **Pro Analytics (`/pro-analytics`)**  
     `crypto ROI calculator, DeFi risk management metrics, Solana pool Sharpe ratio, impermanent loss hedging strategies`

2. **Dynamic Sitemap & Robots.txt**  
   - Add in `app.py` a `/sitemap.xml` route that collects all public endpoints (including `/beginners`, `/developer-guide`, `/security`, `/pro-analytics`, `/blog`), renders `templates/sitemap.xml.j2` with `<urlset>` entries `<loc>` and `<lastmod>{{ today }}</lastmod>`, and returns it as `application/xml`.  
   - Ensure `static/robots.txt` contains:
     ```
     User-agent: *
     Allow: /
     Disallow: /admin
     Sitemap: https://filot.finance/sitemap.xml
     ```
   - Confirm Flask serves `/robots.txt` by default from `/static`.

3. **Structured Data (JSON‑LD)**  
   - In `knowledge.html`, embed an **FAQPage** schema covering each FAQ.  
   - In `/beginners` and `/developer-guide` templates, wrap your 4‑step tutorials in **HowTo** schema.  
   - In `base.html`, add **BreadcrumbList** JSON‑LD reflecting Home → Features/Pools/Knowledge/Blog/etc.

4. **Persona‑Focused Landing Pages**  
   Create four new routes + templates:

   - **/beginners → templates/beginners.html**  
     - H1: “FiLot for Beginners: Your First Steps in Crypto Yield Farming”  
     - 4‑step illustrated guide (screenshots), FAQ accordion, FAQ JSON‑LD  
     - Meta tags & keywords as above  

   - **/developer-guide → templates/developer_guide.html**  
     - H1: “Developer Guide: Extend FiLot with API & Webhooks”  
     - Code snippets for Flask route + Raydium SDK, webhook setup, HowTo JSON‑LD  
     - Meta tags & keywords  

   - **/security → templates/security.html**  
     - H1: “Security & Audits: Non‑Custodial WalletConnect on Solana”  
     - Diagram of on‑chain proof, link to audit report, meta tags & keywords  

   - **/pro-analytics → templates/pro_analytics.html**  
     - H1: “Pro Analytics: ROI, Sharpe Ratio & Impermanent Loss Tools”  
     - Static Sharpe ratio table or calculator placeholder, CSV download link, meta tags & keywords  

5. **Blog Blueprint**  
   - Add `blog.py` blueprint and `Post` model in `models.py`.  
   - Implement `/blog` (list) and `/blog/<slug>` (detail) routes.  
   - Create `templates/blog_list.html` and `templates/blog_post.html`, each with dynamic meta/title/description/keywords and canonical.

6. **Headings & On‑Page Copy**  
   - For every template, ensure:  
     - H1 uses the head term (primary keyword)  
     - H2 uses a mid‑tail keyword  
     - H3/H4 use long‑tail/question phrases  
   - Sprinkle LSI variants (e.g., “passive income crypto,” “on‑chain proof,” “API webhook”) once or twice in each page’s body text.

7. **Image Optimization**  
   - Rename key images under `static/images/` to include keywords (e.g., `filot-sol-usdc-apy.webp`).  
   - In all `<img>` tags, add `alt="…"` with the targeted phrase, plus `width`/`height` attributes.  
   - Serve modern formats via `<picture>` with WebP fallback.

8. **Internal Linking**  
   - On `index.html`, add four persona cards linking to the new persona pages, using keyword‑rich anchor text.  
   - Within content, link contextually (e.g., “Explore our Sharpe ratio tool” → `/pro-analytics`, “Beginner guide” → `/beginners`).

9. **Analytics & Conversion Tracking**  
   - Insert GA4 snippet (placeholder measurement ID) in `base.html` before `</head>`.  
   - Add `data-event="start_investing"` or onclick handlers on all “Start Investing” buttons to fire a GA4 “start_investing” event.

10. **Static Asset Bundling & Performance**  
    - Configure Flask‑Assets (or equivalent) to bundle/minify CSS and JS into hashed files (`main.abc123.min.css`, `main.abc123.min.js`).  
    - Ensure `<link>`/`<script>` reference these hashed assets for cache busting.  
    - Confirm all images compress to WebP and define dimensions to prevent CLS.

11. **Server‑Side SEO Settings**  
    - If you use nginx in front of Gunicorn, enable Gzip:  
      ```nginx
      gzip on;
      gzip_types text/css text/javascript application/javascript application/json;
      ```
    - Set cache headers for `/static/` to `Cache-Control: public, max-age=2592000`.

12. **Accessibility & Core Web Vitals**  
    - Run Lighthouse locally, fix any major accessibility errors (aria‑labels, contrast).  
    - Ensure LCP <2.5s, FID <100ms, CLS <0.1 by optimizing images, deferring non‑critical JS, and preloading key assets.

13. **Git Commits & Summary**  
    - Organize changes into logical commits:  
      - `feat(seo): meta tags & keywords`  
      - `feat(seo): sitemap & robots.txt`  
      - `feat(seo): JSON‑LD structured data`  
      - `feat(pages): add beginners, developer, security, pro-analytics`  
      - `feat(blog): add blog blueprint`  
      - `chore(perf): bundle/minify assets, gzip config`  
    - At the end, give me a concise summary of all implemented tasks and any manual steps (e.g., add GA ID, verify GSC).

Thank you—apply this in one session so the site is fully SEO‑compliant and optimized for Beginners, Tech‑Savvy, Blockchain‑Savvy, and Finance‑Savvy audiences. ```