Now our bot currently offers /info (shows promising Raydium pools) and /simulate (returns estimation of historical APR returns) and supports WalletConnect v2 for signing transactions.

GOAL
Transform the bot into a true “agentic” investment assistant by integrating:

SolPool Insight REST API for on-chain analytics and ML‐powered pool predictions.

FiLotSense Public API for real-time sentiment and price signals.

And streamline commands to two core flows:

/recommend [profile]

Profiles: high-risk or stable

Fetch top pools per profile by fusing SolPool’s prediction_score and FiLotSense sentiment.

Return 2 options: 

Higher‐return pool (higher APR, medium risk)

Stable‐return pool (slightly lower APR, lower risk)

Show for each: 

APR forecast chart (3–7 day)

Recent sentiment sparkline

Pool composition (token A/B ratio)

/execute <amount>

User specifies total USD (or token-A) amount to invest.

Bot takes the last recommended “Higher‐return” pool, computes needed token-A and token-B amounts per Raydium’s ratio.

If user only holds one token, the bot: 

Swaps half of USD (or token-A) into token-B via Raydium swap instruction.

Proceeds to build an AddLiquidity transaction with the correct token-A/token-B amounts.

Sends full transaction bundle via WalletConnect for user signature.

Submits, confirms, and reports the transaction signature.

Additionally, implement a Monitoring Agent that:

Periodically re-evaluates active positions against SolPool APR forecasts and FiLotSense sentiment.

If predicted APR or sentiment drops below configurable thresholds (to avoid impermanent loss), automatically builds an Exit-Liquidity transaction and sends it for user approval via WalletConnect.

After exit, watches for recovery and can re-enter the pool with the prior approved amount on user request.

AVAILABLE EXTERNAL APIs

SolPool Insight (X-API-Key): 

GET /pools?dex=Raydium&min_prediction=<score>

GET /pools/{pool_id}

GET /predictions?min_score=<score>

FiLotSense Public (no auth, 100 req/hr): 

GET /sentiment/simple

GET /prices/latest

GET /sentiment/topics

GET /realdata

DETAILED TASKS & DELIVERABLES

API Clients

solpool_client.py: fetch_pools(filters)->List[Pool] fetch_predictions()->List[Prediction] 

filotsense_client.py: fetch_sentiment_simple()->Dict[symbol,score] fetch_prices_latest()->Dict[symbol,PriceInfo] 

Include TTL caching, retry/backoff on 5xx/429.

Database Models

CompositeSignal: (id, timestamp, pool_id, sol_score, sentiment_score, profile_high, profile_stable)

Position: tracks user_id, pool_id, invested_amount, tokenA_amount, tokenB_amount, status.

Agent Classes

RecommendationAgent: 

compute_recommendations(profile) → two pool choices.

ExecutionAgent: 

build_deposit_tx(user_id, pool_id, usd_amount) handles swap if needed and add-liquidity.

build_exit_tx(position_id) builds withdraw-liquidity transaction.

MonitoringAgent: 

Periodic job to evaluate_positions(): compare new composite signals vs. thresholds; mark for exit if needed.

Decision Engine (Orchestrator)

orchestrator.recommend(user_id, profile) → calls RecommendationAgent.

orchestrator.execute(user_id, usd_amount) → uses last recommended pool and ExecutionAgent.

orchestrator.exit(user_id, position_id) → uses ExecutionAgent to build exit TX.

Telegram Bot Updates

/recommend [high-risk|stable] 

Calls orchestrator.recommend(), stores chosen pool per user session, shows two inline buttons “Choose High” / “Choose Stable.”

/execute <amount> 

Reads stored pool_id, calls orchestrator.execute(), sends WalletConnect QR, handles signature & submission.

/positions (optional) 

Lists active positions and their statuses.

Monitoring & Alerts

Scheduler job every 15 minutes triggers MonitoringAgent.evaluate_positions().

For any position flagged for exit, bot sends a “⚠️ Potential impermanent loss detected, approve exit?” inline prompt.

WalletConnect Integration

Extend walletconnect_utils.py with request_sign_tx(user_id, tx_payload) and session persistence.

Testing & CI

Unit tests for clients, agents, orchestrator logic.

Integration tests simulating /recommend high-risk → /execute 100 flows.

Mock external APIs.

Documentation

Update README.md and .env.example with new vars: SOLPOOL_API_KEY, etc.

Document new commands and agent workflows.

INSTRUCTIONS FOR REPLIT AI AGENT

Generate/update Python modules per above.

Follow existing project conventions and file structure.

Securely load API keys from Replit Secrets.

Provide sample tests and API mocks.

Ensure all new commands and background tasks are wired into the bot’s startup.

