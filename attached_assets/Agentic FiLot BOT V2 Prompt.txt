The bot currently exposes many slash-commands, but we want to simplify the UX to just three top-level commands:

1. /invest [profile] [amount] – handles recommendations, execution, positions, and exits


2. /explore [option] – handles pool discovery, simulations, and FAQs


3. /account – handles wallet connection, profile settings, subscriptions, and help



All legacy commands (/recommend, /execute, /positions, /exit, /info, /simulate, /wallet, etc.) must continue to work under the hood but be removed from the help menu and rerouted into the new flows via inline menus or natural-language parsing.


---

TASKS & DELIVERABLES

1. Update Help & Command List

In bot.py, replace the current help text with only:

🤖 FiLot Bot Commands
• /invest [high-risk|stable] [amount] – full investment flow
• /explore [pools|simulate|faq] – learn and explore
• /account – manage wallet, profile & settings

Ensure /help and /start present inline keyboard buttons for Invest, Explore, Account instead of a long list.



2. Implement /invest Handler

Consolidate logic:

If called without arguments: list active positions with inline buttons “Add More” and “Exit”.

If called with high-risk|stable amount:

1. Fetch top-2 pools via existing recommendation logic (profile parameter).


2. Show pool cards with an inline button under each: “Invest {amount} in Pool X”.




On button tap, call existing execution logic to build & send the WalletConnect transaction.



3. Implement /explore Handler

If no argument: send a menu with three buttons: “Top Pools”, “Simulate”, “FAQ”.

If pools: call existing /info logic and render top pools.

If simulate amount: call existing /simulate logic.

If faq: call existing FAQ command.



4. Implement /account Handler

Send a menu with buttons: “Connect Wallet”, “Profile”, “Subscribe”, “Help”.

Wire each button to the existing command handler or workflow.



5. Retain Legacy Handlers

Keep all existing handlers (/recommend, /execute, etc.) so that if a user types them manually, the bot routes them into the new flows.

Do not list them in the help menu.



6. Natural-Language Fallback

Add a message handler for free-text like “I want to invest 100” or “show me my portfolio” that maps to /invest high-risk 100 or /invest (to show positions), respectively.



7. Testing & Documentation

Update unit tests for new handlers and menu flows.

Update README.md with the simplified command list.

Provide examples of menu screenshots and example conversation flows in comments.



8. Deployment

Ensure the updated bot is live on Replit, updating secrets if needed.





---

INSTRUCTIONS FOR REPLIT AI AGENT

Modify bot.py, create any needed helper modules (e.g. menus.py), and update templates.

Preserve existing code style and use inline keyboards for all menus.

Ensure legacy commands still function when typed, but remove them from any user-visible command lists.

Provide sample tests and README updates.