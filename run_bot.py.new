#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Dedicated entry point for running the Telegram bot with Flask app context
"""

import os
import sys
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)

# Import bot command handlers
from bot import (
    start_command,
    help_command,
    info_command,
    simulate_command,
    subscribe_command,
    unsubscribe_command,
    status_command,
    verify_command,
    wallet_command,
    walletconnect_command,
    profile_command,
    handle_message,
    handle_callback_query,
    error_handler,
    create_application
)

# Import Flask app for the web interface
from app import app

# Load environment variables from .env file if it exists
load_dotenv()

# Configure logging to file and console
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # Log to console
        logging.FileHandler('logs/bot.log')  # Log to file
    ]
)
logger = logging.getLogger(__name__)

def main():
    """
    Main function to start the Telegram bot with Flask app context.
    """
    try:
        # Check for Telegram bot token
        token = os.environ.get("TELEGRAM_BOT_TOKEN")
        if not token:
            logger.error("Telegram bot token not found. Please set the TELEGRAM_BOT_TOKEN environment variable.")
            sys.exit(1)
            
        logger.info(f"Bot token loaded (starts with {token[:5]}...)")
        
        # Use Flask app context for database operations
        with app.app_context():
            # Create the application with all handlers registered
            application = create_application()
            
            # Start the bot
            logger.info("Starting bot...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except Exception as e:
        logger.error(f"Failed to start bot: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()